var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import { B as Browser } from "./browser-polyfill.js";
import { y as i18n, W as isRef, r as ref, H as shallowRef, a2 as watchEffect, j as computed, a3 as getMessagesFromLocale } from "./i18n.js";
const _imports_0$1 = "/48x48.png";
var TypeOfList = /* @__PURE__ */ ((TypeOfList2) => {
  TypeOfList2[TypeOfList2["Today"] = 0] = "Today";
  TypeOfList2[TypeOfList2["All"] = 1] = "All";
  TypeOfList2[TypeOfList2["ByDays"] = 2] = "ByDays";
  TypeOfList2[TypeOfList2["Dashboard"] = 3] = "Dashboard";
  return TypeOfList2;
})(TypeOfList || {});
var SortingBy = /* @__PURE__ */ ((SortingBy2) => {
  SortingBy2[SortingBy2["UsageTime"] = 0] = "UsageTime";
  SortingBy2[SortingBy2["Sessions"] = 1] = "Sessions";
  return SortingBy2;
})(SortingBy || {});
var SettingsTab = /* @__PURE__ */ ((SettingsTab2) => {
  SettingsTab2[SettingsTab2["Dashboard"] = 0] = "Dashboard";
  SettingsTab2[SettingsTab2["WebsiteStats"] = 1] = "WebsiteStats";
  SettingsTab2[SettingsTab2["GeneralSettings"] = 2] = "GeneralSettings";
  SettingsTab2[SettingsTab2["WhiteList"] = 3] = "WhiteList";
  SettingsTab2[SettingsTab2["Limits"] = 4] = "Limits";
  SettingsTab2[SettingsTab2["Notifications"] = 5] = "Notifications";
  SettingsTab2[SettingsTab2["Pomodoro"] = 6] = "Pomodoro";
  SettingsTab2[SettingsTab2["About"] = 7] = "About";
  return SettingsTab2;
})(SettingsTab || {});
var ListWithTime = /* @__PURE__ */ ((ListWithTime2) => {
  ListWithTime2[ListWithTime2["Limits"] = 0] = "Limits";
  ListWithTime2[ListWithTime2["Notifications"] = 1] = "Notifications";
  return ListWithTime2;
})(ListWithTime || {});
var TypeOfUrl = /* @__PURE__ */ ((TypeOfUrl2) => {
  TypeOfUrl2[TypeOfUrl2["WebSite"] = 0] = "WebSite";
  TypeOfUrl2[TypeOfUrl2["Document"] = 1] = "Document";
  return TypeOfUrl2;
})(TypeOfUrl || {});
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}
function todayLocalDate() {
  return (/* @__PURE__ */ new Date()).toLocaleDateString("en-US");
}
const TodayRange = [/* @__PURE__ */ new Date(), /* @__PURE__ */ new Date()];
const ThisWeekRange = [startOfWeek(/* @__PURE__ */ new Date()), endOfWeek(/* @__PURE__ */ new Date())];
const ThisMonthRange = [startOfMonth(/* @__PURE__ */ new Date()), endOfMonth(/* @__PURE__ */ new Date())];
const LatMonthRange = [
  startOfMonth(subMonths(/* @__PURE__ */ new Date(), 1)),
  endOfMonth(subMonths(/* @__PURE__ */ new Date(), 1))
];
function ranges() {
  return [
    { label: i18n.global.t("today.message"), range: TodayRange },
    { label: i18n.global.t("week.message"), range: ThisWeekRange },
    { label: i18n.global.t("month.message"), range: ThisMonthRange },
    {
      label: i18n.global.t("lastMonth.message"),
      range: LatMonthRange
    }
  ];
}
function isDateEqual(first, second) {
  return first.getFullYear() == second.getFullYear() && first.getMonth() == second.getMonth() && first.getDate() == second.getDate() && first.getHours() == second.getHours() && first.getMinutes() == second.getMinutes() && first.getSeconds() == second.getSeconds();
}
function print(logFn, style, ...args) {
  if (typeof args[0] === "string") {
    const newArgs = [...args];
    logFn(
      `%cWeb Activity Time Tracker%c${(/* @__PURE__ */ new Date()).toLocaleTimeString()}%c ${newArgs.shift()}`,
      style,
      "background-color: #eaf1fb; padding: 2px 4px; border-radius: 3px",
      "",
      ...newArgs
    );
  } else {
    logFn("%cWeb Activity Time Tracker", style, ...args);
  }
}
function log(...args) {
  print(
    console.log,
    "color: white; background-color: #1e8e3e; padding: 2px 4px; border-radius: 3px; font-weight: bold",
    ...args
  );
}
const logger = {
  log
};
class Tab {
  constructor() {
    __publicField(this, "url", "");
    __publicField(this, "favicon", "");
    __publicField(this, "summaryTime", 0);
    __publicField(this, "counter", 0);
    __publicField(this, "days", []);
  }
  init(url) {
    this.url = url;
  }
  incSummaryTime() {
    this.summaryTime += 1;
    const day = this.days.find((x) => x.date == todayLocalDate());
    if (day === void 0) {
      const newTab = this.addNewDay();
      newTab.incSummaryTime();
    } else
      day.incSummaryTime();
  }
  incCounter() {
    this.counter += 1;
    logger.log(`Counter ${this.url} - ${this.counter}`);
    const day = this.days.find((x) => x.date == todayLocalDate());
    if (day === void 0) {
      const newTab = this.addNewDay();
      newTab.incCounter();
    } else
      day.incCounter();
  }
  addNewDay() {
    const newTabDay = new TabDay();
    newTabDay.init(todayLocalDate());
    this.days.push(newTabDay);
    return newTabDay;
  }
  deserialize(input) {
    var _a;
    this.url = input.url;
    this.counter = input.counter;
    this.favicon = input.favicon;
    this.summaryTime = input.summaryTime;
    if (((_a = input.days) == null ? void 0 : _a.length) > 0)
      this.days = input.days.map((x) => new TabDay().deserialize(x));
    return this;
  }
  setFavicon(favicon) {
    this.favicon = favicon;
  }
}
class TabDay {
  constructor() {
    __publicField(this, "counter", 0);
    __publicField(this, "date", "");
    __publicField(this, "summary", 0);
  }
  init(date) {
    this.date = date;
  }
  incSummaryTime() {
    this.summary += 1;
  }
  incCounter() {
    this.counter += 1;
  }
  deserialize(input) {
    this.counter = input.counter;
    this.date = input.date;
    this.summary = input.summary;
    return this;
  }
}
class TimeInterval {
  constructor() {
    __publicField(this, "domain", "");
    __publicField(this, "intervals", []);
    __publicField(this, "day", "");
  }
  init(day, domain) {
    this.domain = domain;
    this.intervals = [];
    this.day = day;
  }
  addInterval() {
    const stringDate = this.getCurrentStringDate();
    this.intervals.push(stringDate + "-" + stringDate);
    logger.log(`Add interval ${this.domain} - ${stringDate} - ${stringDate}`);
  }
  closeInterval() {
    const stringDate = this.getCurrentStringDate();
    const currentInterval = this.intervals[this.intervals.length - 1];
    if (currentInterval != null) {
      if (currentInterval.split("-")[0] == currentInterval.split("-")[1]) {
        this.intervals.pop();
        this.intervals.push(currentInterval.split("-")[0] + "-" + stringDate);
        logger.log(
          `Close interval ${this.domain} - ${currentInterval.split("-")[0]} - ${stringDate}`
        );
      }
    }
  }
  deserialize(input) {
    this.domain = input.domain;
    this.day = input.day;
    this.intervals = input.intervals;
    return this;
  }
  getCurrentStringDate() {
    const date = /* @__PURE__ */ new Date();
    return date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
  }
}
var PomodoroSounds = /* @__PURE__ */ ((PomodoroSounds2) => {
  PomodoroSounds2["Sound 1"] = "1.mp3";
  PomodoroSounds2["Sound 2"] = "2.mp3";
  PomodoroSounds2["Sound 3"] = "3.mp3";
  PomodoroSounds2["Sound 4"] = "4.mp3";
  PomodoroSounds2["Sound 5"] = "5.mp3";
  PomodoroSounds2["Sound 6"] = "6.mp3";
  PomodoroSounds2["Sound 7"] = "7.mp3";
  PomodoroSounds2["Sound 8"] = "8.mp3";
  PomodoroSounds2["Sound 9"] = "9.mp3";
  PomodoroSounds2["Sound 10"] = "10.mp3";
  PomodoroSounds2["Sound 11"] = "11.mp3";
  PomodoroSounds2["Sound 12"] = "12.mp3";
  PomodoroSounds2["Sound 13"] = "13.mp3";
  return PomodoroSounds2;
})(PomodoroSounds || {});
const MINUTE_IN_SECONDS = 60;
const HOUR_IN_SECONDS = 60 * MINUTE_IN_SECONDS;
const SECOND = 1e3;
const MINUTE = 60 * SECOND;
const HOUR = 60 * MINUTE;
function treatAsUTC(date) {
  const result = new Date(date);
  result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
  return result;
}
function daysBetween(startDate, endDate) {
  const millisecondsPerDay = 24 * 60 * 60 * 1e3;
  return (treatAsUTC(endDate).valueOf() - treatAsUTC(startDate).valueOf()) / millisecondsPerDay + 1;
}
var StorageParams = /* @__PURE__ */ ((StorageParams2) => {
  StorageParams2["BLACK_LIST"] = "black_list";
  StorageParams2["RESTRICTION_LIST"] = "restriction_list";
  StorageParams2["NOTIFICATION_LIST"] = "notification_list";
  StorageParams2["NOTIFICATION_MESSAGE"] = "notification_message";
  StorageParams2["INTERVAL_INACTIVITY"] = "inactivity_interval";
  StorageParams2["DARK_MODE"] = "night_mode";
  StorageParams2["VIEW_TIME_IN_BADGE"] = "view_time_in_badge";
  StorageParams2["SHOW_CHANGELOG"] = "show_changelog";
  StorageParams2["BLOCK_DEFERRAL"] = "view_block_deferral";
  StorageParams2["BLOCK_DEFERRAL_TIME"] = "view_block_deferral_time";
  StorageParams2["DAILY_SUMMARY_NOTIFICATION_TIME"] = "daily-summary-notification-time";
  StorageParams2["DAILY_NOTIFICATION"] = "daily_notification";
  StorageParams2["REVIEW_DATE"] = "review_date";
  StorageParams2["REVIEW_PROMPT_AT"] = "review_prompt_at";
  StorageParams2["INSTALL_DATE"] = "install-date";
  StorageParams2["PROMO_CLEAR_YOUTUBE_ON_LIMITS"] = "promo-clear-youtube-on-limits";
  StorageParams2["PROMO_CLEAR_YOUTUBE_ON_BLOCK"] = "promo-clear-youtube-on-block";
  StorageParams2["IS_POMODORO_ENABLED"] = "is-pomodoro-enabled";
  StorageParams2["POMODORO_START_TIME"] = "pomodoro-start-time";
  StorageParams2["POMODORO_INTERVAL_WORK"] = "pomodoro-interval-work";
  StorageParams2["POMODORO_AUDIO_AFTER_WORK"] = "pomodoro-audio-after-work";
  StorageParams2["POMODORO_AUDIO_AFTER_REST"] = "pomodoro-audio-after-rest";
  StorageParams2["POMODORO_AUDIO_AFTER_FINISHED"] = "pomodoro-audio-after-finished";
  StorageParams2["POMODORO_INTERVAL_REST"] = "pomodoro-interval-rest";
  StorageParams2["POMODORO_FREQUENCY"] = "pomodoro-frequency";
  return StorageParams2;
})(StorageParams || {});
var StorageDeserializeParam = /* @__PURE__ */ ((StorageDeserializeParam2) => {
  StorageDeserializeParam2["TABS"] = "tabs";
  StorageDeserializeParam2["TIMEINTERVAL_LIST"] = "time_interval";
  return StorageDeserializeParam2;
})(StorageDeserializeParam || {});
function createDeserializeParambject(param) {
  switch (param) {
    case "tabs":
      return new Tab();
    case "time_interval":
      return new TimeInterval();
  }
}
var InactivityInterval = /* @__PURE__ */ ((InactivityInterval2) => {
  InactivityInterval2[InactivityInterval2["Seconds_30"] = 30] = "Seconds_30";
  InactivityInterval2[InactivityInterval2["Seconds_45"] = 45] = "Seconds_45";
  InactivityInterval2[InactivityInterval2["Min_1"] = 60] = "Min_1";
  InactivityInterval2[InactivityInterval2["Min_2"] = 120] = "Min_2";
  InactivityInterval2[InactivityInterval2["Min_5"] = 300] = "Min_5";
  InactivityInterval2[InactivityInterval2["Min_10"] = 600] = "Min_10";
  InactivityInterval2[InactivityInterval2["Min_20"] = 1200] = "Min_20";
  InactivityInterval2[InactivityInterval2["Min_30"] = 1800] = "Min_30";
  return InactivityInterval2;
})(InactivityInterval || {});
const NOTIFICATION_MESSAGE_DEFAULT = "You have spent a lot of time on this site";
const INTERVAL_INACTIVITY_DEFAULT = 30;
const DARK_MODE_DEFAULT = false;
const VIEW_TIME_IN_BADGE_DEFAULT = true;
const BLOCK_DEFERRAL_DEFAULT = true;
const DAILY_SUMMARY_NOTIFICATION_TIME_DEFAULT = 20 * HOUR / 1e3;
const DAILY_NOTIFICATION_DEFAULT = true;
const SHOW_CHANGELOG_DEFAULT = false;
const SHOW_PROMO_CLEAR_YOUTUBE_DEFAULT = false;
const IS_POMODORO_ENABLED_DEFAULT = false;
const POMODORO_INTERVAL_WORK_DEFAULT = 25 * MINUTE_IN_SECONDS;
const POMODORO_INTERVAL_REST_DEFAULT = 5 * MINUTE_IN_SECONDS;
const POMODORO_FREQUENCY_DEFAULT = 3;
const POMODORO_AUDIO_AFTER_WORK_DEFAULT = PomodoroSounds["Sound 3"];
const POMODORO_AUDIO_AFTER_REST_DEFAULT = PomodoroSounds["Sound 8"];
const POMODORO_AUDIO_AFTER_FINISHED_DEFAULT = PomodoroSounds["Sound 10"];
function getDefaultValue(param) {
  switch (param) {
    case "black_list":
      return [];
    case "restriction_list":
      return [];
    case "notification_list":
      return [];
    case "notification_message":
      return NOTIFICATION_MESSAGE_DEFAULT;
    case "inactivity_interval":
      return INTERVAL_INACTIVITY_DEFAULT;
    case "night_mode":
      return DARK_MODE_DEFAULT;
    case "view_time_in_badge":
      return VIEW_TIME_IN_BADGE_DEFAULT;
    case "view_block_deferral":
      return BLOCK_DEFERRAL_DEFAULT;
    case "view_block_deferral_time":
      return [];
    case "daily-summary-notification-time":
      return DAILY_SUMMARY_NOTIFICATION_TIME_DEFAULT;
    case "daily_notification":
      return DAILY_NOTIFICATION_DEFAULT;
    case "show_changelog":
      return SHOW_CHANGELOG_DEFAULT;
    case "promo-clear-youtube-on-block":
    case "promo-clear-youtube-on-limits":
      return SHOW_PROMO_CLEAR_YOUTUBE_DEFAULT;
    case "is-pomodoro-enabled":
      return IS_POMODORO_ENABLED_DEFAULT;
    case "pomodoro-interval-work":
      return POMODORO_INTERVAL_WORK_DEFAULT;
    case "pomodoro-interval-rest":
      return POMODORO_INTERVAL_REST_DEFAULT;
    case "pomodoro-frequency":
      return POMODORO_FREQUENCY_DEFAULT;
    case "pomodoro-audio-after-work":
      return POMODORO_AUDIO_AFTER_WORK_DEFAULT;
    case "pomodoro-audio-after-rest":
      return POMODORO_AUDIO_AFTER_REST_DEFAULT;
    case "pomodoro-audio-after-finished":
      return POMODORO_AUDIO_AFTER_FINISHED_DEFAULT;
  }
}
function isEmpty(obj) {
  for (const prop in obj) {
    if (obj.hasOwnProperty(prop))
      return false;
  }
  return JSON.stringify(obj) === JSON.stringify({});
}
function isDomainEquals(first, second) {
  if (first === second)
    return true;
  else {
    var resultUrl = function(url) {
      if (url.indexOf("www.") > -1)
        return url.split("www.")[1];
      return url;
    };
    if (resultUrl(first) === resultUrl(second))
      return true;
    else
      return false;
  }
}
function getPercentage(time, totalTime) {
  return (time / totalTime * 100).toFixed(2);
}
class LocalStorage {
  async getDeserializeList(param) {
    return new Promise(async (resolve) => {
      const obj = await Browser.storage.local.get(param);
      const list = obj[param];
      if (list != void 0) {
        let tempList = [];
        for (let i = 0; i < list.length; i++) {
          const obj2 = createDeserializeParambject(param);
          tempList.push(obj2.deserialize(list[i]));
        }
        return resolve(tempList);
      } else
        resolve([]);
    });
  }
  async saveTabs(value) {
    return await Browser.storage.local.set({ [StorageDeserializeParam.TABS]: value });
  }
  async saveIntervalList(value) {
    return await Browser.storage.local.set({ [StorageDeserializeParam.TIMEINTERVAL_LIST]: value });
  }
  async saveValue(name, value) {
    return await Browser.storage.local.set({
      [name]: value
    });
  }
  async getValue(name, defaultValue) {
    let value = await Browser.storage.local.get(name);
    if (isEmpty(value) && defaultValue != void 0) {
      await this.saveValue(name, defaultValue);
      return defaultValue;
    }
    return value[name];
  }
}
function injectStorage() {
  return new LocalStorage();
}
const _Settings = class _Settings {
  constructor() {
    __publicField(this, "_settings", /* @__PURE__ */ new Map());
    if (_Settings.instance) {
      throw new Error("Error - use Settings.getInstance()");
    }
  }
  static getInstance() {
    _Settings.instance = _Settings.instance || new _Settings();
    return _Settings.instance;
  }
  async getSetting(param) {
    if (this._settings.has(param))
      return this._settings.get(param);
    else
      return await this.getValue(param);
  }
  async reloadSetting(param) {
    await this.getValue(param);
  }
  async getValue(param) {
    const storage = injectStorage();
    const value = await storage.getValue(param, getDefaultValue(param));
    this._settings.set(param, value);
    return value;
  }
};
__publicField(_Settings, "instance");
let Settings = _Settings;
typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope;
const noop = () => {
};
function computedAsync(evaluationCallback, initialState, optionsOrRef) {
  let options;
  if (isRef(optionsOrRef)) {
    options = {
      evaluating: optionsOrRef
    };
  } else {
    options = optionsOrRef || {};
  }
  const {
    lazy = false,
    evaluating = void 0,
    shallow = true,
    onError = noop
  } = options;
  const started = ref(!lazy);
  const current = shallow ? shallowRef(initialState) : ref(initialState);
  let counter = 0;
  watchEffect(async (onInvalidate) => {
    if (!started.value)
      return;
    counter++;
    const counterAtBeginning = counter;
    let hasFinished = false;
    if (evaluating) {
      Promise.resolve().then(() => {
        evaluating.value = true;
      });
    }
    try {
      const result = await evaluationCallback((cancelCallback) => {
        onInvalidate(() => {
          if (evaluating)
            evaluating.value = false;
          if (!hasFinished)
            cancelCallback();
        });
      });
      if (counterAtBeginning === counter)
        current.value = result;
    } catch (e) {
      onError(e);
    } finally {
      if (evaluating && counterAtBeginning === counter)
        evaluating.value = false;
      hasFinished = true;
    }
  });
  if (lazy) {
    return computed(() => {
      started.value = true;
      return current.value;
    });
  } else {
    return current;
  }
}
function convertHHMMToSeconds(hours, minutes) {
  return hours * HOUR_IN_SECONDS + minutes * MINUTE_IN_SECONDS;
}
function convertSecondsToHHMM(seconds) {
  const hours = Math.floor(seconds / HOUR_IN_SECONDS);
  const totalSeconds = seconds % HOUR_IN_SECONDS;
  const mins = Math.floor(totalSeconds / MINUTE_IN_SECONDS);
  return {
    hours,
    minutes: mins
  };
}
function convertSummaryTimeToString(summaryTime) {
  let days = Math.floor(summaryTime / 3600 / 24);
  const totalHours = summaryTime % (3600 * 24);
  let hours = Math.floor(totalHours / 3600);
  const totalSeconds = summaryTime % 3600;
  let mins = Math.floor(totalSeconds / 60);
  let seconds = totalSeconds % 60;
  function appendTime(value, stringPrefix, isUseZero = false) {
    return value > 0 ? `${isUseZero ? zeroAppend(value) : value} ${stringPrefix}` : "";
  }
  const daysStr = appendTime(days, i18n.global.t("d.message"));
  const hoursStr = appendTime(hours, i18n.global.t("h.message"), daysStr == "" ? false : true);
  const minsStr = appendTime(mins, i18n.global.t("m.message"), hoursStr == "" ? false : true);
  const secondsStr = appendTime(seconds, i18n.global.t("s.message"), minsStr == "" ? false : true);
  return `${daysStr} ${hoursStr} ${minsStr} ${secondsStr}`;
}
function convertLimitTimeToString(summaryTime) {
  const totalHours = summaryTime % (3600 * 24);
  let hours = Math.floor(totalHours / 3600);
  const totalSeconds = summaryTime % 3600;
  let mins = Math.floor(totalSeconds / 60);
  function appendTime(value, stringPrefix, isUseZero = false) {
    return `${isUseZero ? zeroAppend(value) : value} ${stringPrefix}`;
  }
  return `${appendTime(hours, getMessagesFromLocale()["h"]["message"])} ${appendTime(
    mins,
    getMessagesFromLocale()["m"]["message"],
    true
  )}`;
}
function zeroAppend(time) {
  if (time < 10)
    return `0${time}`;
  else
    return time;
}
function convertStringTimeIntervalToSeconds(timeInterval) {
  const time = timeInterval.split(":");
  return Number(time[0]) * HOUR_IN_SECONDS + Number(time[1]) * MINUTE_IN_SECONDS + Number(time[2]);
}
function convertHoursToTime(time) {
  const timeInSeconds = Math.floor(time * MINUTE_IN_SECONDS);
  return convertSummaryTimeToString(timeInSeconds);
}
function getStringTab(tab) {
  switch (tab) {
    case SettingsTab.Dashboard:
      return "dashboard";
    case SettingsTab.WebsiteStats:
      return "website-stats";
    case SettingsTab.GeneralSettings:
      return "settings";
    case SettingsTab.About:
      return "about";
    case SettingsTab.Limits:
      return "limits";
    case SettingsTab.WhiteList:
      return "whitelist";
    case SettingsTab.Notifications:
      return "notifications";
    case SettingsTab.Pomodoro:
      return "pomodoro";
  }
}
function getEnumValueTab(tab) {
  switch (tab) {
    case "dashboard":
      return SettingsTab.Dashboard;
    case "website-stats":
      return SettingsTab.WebsiteStats;
    case "settings":
      return SettingsTab.GeneralSettings;
    case "about":
      return SettingsTab.About;
    case "limits":
      return SettingsTab.Limits;
    case "whitelist":
      return SettingsTab.WhiteList;
    case "notifications":
      return SettingsTab.Notifications;
    case "pomodoro":
      return SettingsTab.Pomodoro;
  }
}
const _imports_0 = "/close.svg";
const CHROME_STORE_REVIEW_URL = `https://chromewebstore.google.com/detail/web-activity-time-tracker/${"hhfnghjdeddcfegfekjeihfmbjenlomm"}/reviews`;
const CHROME_STORE_SUPPORT_URL = `https://chromewebstore.google.com/detail/web-activity-time-tracker/${"hhfnghjdeddcfegfekjeihfmbjenlomm"}/support`;
const CHROME_STORE_CLEAR_YOUTUBE_URL = "https://chromewebstore.google.com/detail/clean-youtube-update-yout/kalhfjomailhflienkfajocjodgjipie";
const general = "";
export {
  computedAsync as $,
  POMODORO_AUDIO_AFTER_FINISHED_DEFAULT as A,
  BLOCK_DEFERRAL_DEFAULT as B,
  CHROME_STORE_REVIEW_URL as C,
  DARK_MODE_DEFAULT as D,
  CHROME_STORE_CLEAR_YOUTUBE_URL as E,
  CHROME_STORE_SUPPORT_URL as F,
  StorageDeserializeParam as G,
  convertStringTimeIntervalToSeconds as H,
  IS_POMODORO_ENABLED_DEFAULT as I,
  convertHoursToTime as J,
  getEnumValueTab as K,
  ListWithTime as L,
  toDate as M,
  NOTIFICATION_MESSAGE_DEFAULT as N,
  _typeof as O,
  PomodoroSounds as P,
  addMonths as Q,
  startOfWeek as R,
  StorageParams as S,
  ThisWeekRange as T,
  getDefaultOptions as U,
  VIEW_TIME_IN_BADGE_DEFAULT as V,
  millisecondsInHour as W,
  millisecondsInMinute as X,
  millisecondsInSecond as Y,
  subMonths as Z,
  _imports_0 as _,
  ranges as a,
  getStringTab as a0,
  getPercentage as a1,
  SortingBy as a2,
  Tab as a3,
  daysBetween as a4,
  endOfWeek as a5,
  MINUTE as a6,
  log as a7,
  convertLimitTimeToString as a8,
  Settings as b,
  convertSummaryTimeToString as c,
  isDateEqual as d,
  SettingsTab as e,
  TypeOfList as f,
  _imports_0$1 as g,
  INTERVAL_INACTIVITY_DEFAULT as h,
  injectStorage as i,
  SHOW_CHANGELOG_DEFAULT as j,
  InactivityInterval as k,
  logger as l,
  todayLocalDate as m,
  TypeOfUrl as n,
  isDomainEquals as o,
  convertHHMMToSeconds as p,
  convertSecondsToHHMM as q,
  requiredArgs as r,
  DAILY_NOTIFICATION_DEFAULT as s,
  toInteger as t,
  DAILY_SUMMARY_NOTIFICATION_TIME_DEFAULT as u,
  POMODORO_INTERVAL_WORK_DEFAULT as v,
  POMODORO_INTERVAL_REST_DEFAULT as w,
  POMODORO_FREQUENCY_DEFAULT as x,
  POMODORO_AUDIO_AFTER_WORK_DEFAULT as y,
  POMODORO_AUDIO_AFTER_REST_DEFAULT as z
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
